```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MEMBER
  CHAPLAIN
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  fullName      String
  email         String    @unique
  phoneNumber   String?
  country       String?
  language      String?
  referralCode  String?
  role          UserRole  @default(MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  memberProfile   MemberProfile? // One-to-one relation for members
  chaplainProfile ChaplainProfile? // One-to-one relation for chaplains
  messagesSent    Message[] @relation("SenderMessages")
  messagesReceived Message[] @relation("ReceiverMessages")
  supportRequests SupportRequest[] @relation("RequesterSupportRequests")
  acceptedSupportRequests SupportRequest[] @relation("AcceptorSupportRequests")
}

model MemberProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  // Add any member-specific fields here if needed
}

model ChaplainProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  specializations String[] // e.g., ["Pastor", "Psic√≥logo"]
  areaOfExpertise String?
  experience      String?
  certificates    String[] // URLs or paths to uploaded certificates
  isApproved      Boolean   @default(false)
  isAvailable     Boolean   @default(true)
  rating          Float?    @default(0.0)
  totalRatings    Int       @default(0)
  // Add any chaplain-specific fields here if needed
}

model Message {
  id            String    @id @default(uuid())
  senderId      String
  receiverId    String
  content       String
  contentType   String    // e.g., "text", "audio"
  status        String    // e.g., "sent", "delivered", "read"
  translatedContent String?
  createdAt     DateTime  @default(now())

  sender        User      @relation("SenderMessages", fields: [senderId], references: [id])
  receiver      User      @relation("ReceiverMessages", fields: [receiverId], references: [id])
  supportRequest SupportRequest @relation(fields: [supportRequestId], references: [id])
  supportRequestId String
}

enum SupportRequestCategory {
  PRAYER
  COUNSELING
  VENT
  OTHER
}

model SupportRequest {
  id            String    @id @default(uuid())
  requesterId   String
  acceptorId    String?
  title         String
  description   String
  category      SupportRequestCategory
  status        String    // e.g., "pending", "accepted", "completed", "cancelled"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  requester     User      @relation("RequesterSupportRequests", fields: [requesterId], references: [id])
  acceptor      User?     @relation("AcceptorSupportRequests", fields: [acceptorId], references: [id])
  messages      Message[]
}
```

